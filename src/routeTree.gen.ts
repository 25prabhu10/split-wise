/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app'
import { Route as UserRouteRouteImport } from './routes/user/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppDashboardRouteImport } from './routes/_app/dashboard'
import { Route as authSignUpRouteImport } from './routes/(auth)/sign-up'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as AppGroupsRouteRouteImport } from './routes/_app/groups/route'
import { Route as AppGroupsIndexRouteImport } from './routes/_app/groups/index'
import { Route as AppGroupsCreateRouteImport } from './routes/_app/groups/create'
import { Route as AppGroupsGroupIdIndexRouteImport } from './routes/_app/groups/$groupId/index'
import { Route as AppGroupsGroupIdEditRouteImport } from './routes/_app/groups/$groupId/edit'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const rootServerRouteImport = createServerRootRoute()

const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport
} as any)
const UserRouteRoute = UserRouteRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRoute
} as any)
const authSignUpRoute = authSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => authRouteRoute
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authRouteRoute
} as any)
const AppGroupsRouteRoute = AppGroupsRouteRouteImport.update({
  id: '/groups',
  path: '/groups',
  getParentRoute: () => AppRoute
} as any)
const AppGroupsIndexRoute = AppGroupsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppGroupsRouteRoute
} as any)
const AppGroupsCreateRoute = AppGroupsCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AppGroupsRouteRoute
} as any)
const AppGroupsGroupIdIndexRoute = AppGroupsGroupIdIndexRouteImport.update({
  id: '/$groupId/',
  path: '/$groupId/',
  getParentRoute: () => AppGroupsRouteRoute
} as any)
const AppGroupsGroupIdEditRoute = AppGroupsGroupIdEditRouteImport.update({
  id: '/$groupId/edit',
  path: '/$groupId/edit',
  getParentRoute: () => AppGroupsRouteRoute
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authRouteRouteWithChildren
  '/user': typeof UserRouteRoute
  '/groups': typeof AppGroupsRouteRouteWithChildren
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/dashboard': typeof AppDashboardRoute
  '/groups/create': typeof AppGroupsCreateRoute
  '/groups/': typeof AppGroupsIndexRoute
  '/groups/$groupId/edit': typeof AppGroupsGroupIdEditRoute
  '/groups/$groupId': typeof AppGroupsGroupIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof authRouteRouteWithChildren
  '/user': typeof UserRouteRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/dashboard': typeof AppDashboardRoute
  '/groups/create': typeof AppGroupsCreateRoute
  '/groups': typeof AppGroupsIndexRoute
  '/groups/$groupId/edit': typeof AppGroupsGroupIdEditRoute
  '/groups/$groupId': typeof AppGroupsGroupIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/user': typeof UserRouteRoute
  '/_app': typeof AppRouteWithChildren
  '/_app/groups': typeof AppGroupsRouteRouteWithChildren
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/_app/dashboard': typeof AppDashboardRoute
  '/_app/groups/create': typeof AppGroupsCreateRoute
  '/_app/groups/': typeof AppGroupsIndexRoute
  '/_app/groups/$groupId/edit': typeof AppGroupsGroupIdEditRoute
  '/_app/groups/$groupId/': typeof AppGroupsGroupIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/user'
    | '/groups'
    | '/sign-in'
    | '/sign-up'
    | '/dashboard'
    | '/groups/create'
    | '/groups/'
    | '/groups/$groupId/edit'
    | '/groups/$groupId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/user'
    | '/sign-in'
    | '/sign-up'
    | '/dashboard'
    | '/groups/create'
    | '/groups'
    | '/groups/$groupId/edit'
    | '/groups/$groupId'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/user'
    | '/_app'
    | '/_app/groups'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/_app/dashboard'
    | '/_app/groups/create'
    | '/_app/groups/'
    | '/_app/groups/$groupId/edit'
    | '/_app/groups/$groupId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  UserRouteRoute: typeof UserRouteRoute
  AppRoute: typeof AppRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRoute
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/_app/groups': {
      id: '/_app/groups'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof AppGroupsRouteRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/groups/': {
      id: '/_app/groups/'
      path: '/'
      fullPath: '/groups/'
      preLoaderRoute: typeof AppGroupsIndexRouteImport
      parentRoute: typeof AppGroupsRouteRoute
    }
    '/_app/groups/create': {
      id: '/_app/groups/create'
      path: '/create'
      fullPath: '/groups/create'
      preLoaderRoute: typeof AppGroupsCreateRouteImport
      parentRoute: typeof AppGroupsRouteRoute
    }
    '/_app/groups/$groupId/': {
      id: '/_app/groups/$groupId/'
      path: '/$groupId'
      fullPath: '/groups/$groupId'
      preLoaderRoute: typeof AppGroupsGroupIdIndexRouteImport
      parentRoute: typeof AppGroupsRouteRoute
    }
    '/_app/groups/$groupId/edit': {
      id: '/_app/groups/$groupId/edit'
      path: '/$groupId/edit'
      fullPath: '/groups/$groupId/edit'
      preLoaderRoute: typeof AppGroupsGroupIdEditRouteImport
      parentRoute: typeof AppGroupsRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface authRouteRouteChildren {
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(authRouteRouteChildren)

interface AppGroupsRouteRouteChildren {
  AppGroupsCreateRoute: typeof AppGroupsCreateRoute
  AppGroupsIndexRoute: typeof AppGroupsIndexRoute
  AppGroupsGroupIdEditRoute: typeof AppGroupsGroupIdEditRoute
  AppGroupsGroupIdIndexRoute: typeof AppGroupsGroupIdIndexRoute
}

const AppGroupsRouteRouteChildren: AppGroupsRouteRouteChildren = {
  AppGroupsCreateRoute: AppGroupsCreateRoute,
  AppGroupsIndexRoute: AppGroupsIndexRoute,
  AppGroupsGroupIdEditRoute: AppGroupsGroupIdEditRoute,
  AppGroupsGroupIdIndexRoute: AppGroupsGroupIdIndexRoute
}

const AppGroupsRouteRouteWithChildren = AppGroupsRouteRoute._addFileChildren(
  AppGroupsRouteRouteChildren
)

interface AppRouteChildren {
  AppGroupsRouteRoute: typeof AppGroupsRouteRouteWithChildren
  AppDashboardRoute: typeof AppDashboardRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppGroupsRouteRoute: AppGroupsRouteRouteWithChildren,
  AppDashboardRoute: AppDashboardRoute
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  UserRouteRoute: UserRouteRoute,
  AppRoute: AppRouteWithChildren
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
